diff --git a/src/com/android/camera/AndroidCameraManagerImpl.java b/src/com/android/camera/AndroidCameraManagerImpl.java
old mode 100644
new mode 100755
index 62a0854..6276cfc
--- a/src/com/android/camera/AndroidCameraManagerImpl.java
+++ b/src/com/android/camera/AndroidCameraManagerImpl.java
@@ -27,6 +27,7 @@ import android.hardware.Camera.AutoFocusCallback;
 import android.hardware.Camera.AutoFocusMoveCallback;
 import android.hardware.Camera.ErrorCallback;
 import android.hardware.Camera.FaceDetectionListener;
+import android.hardware.Camera.CornerDetectionListener;
 import android.hardware.Camera.OnZoomChangeListener;
 import android.hardware.Camera.Parameters;
 import android.hardware.Camera.PictureCallback;
@@ -99,6 +100,9 @@ class AndroidCameraManagerImpl implements CameraManager {
     private static final int SET_LONGSHOT = 701;
     private static final int SET_AUTO_HDR_MODE = 801;
 
+	//corner detect
+	private static final int SET_CORNER_DETECTION_LISTENER = 901;
+
     //HAL1 version code
     private static final int CAMERA_HAL_API_VERSION_1_0 = 0x100;
 
@@ -133,6 +137,10 @@ class AndroidCameraManagerImpl implements CameraManager {
             mCamera.setFaceDetectionListener(listener);
         }
 
+        private void setCornerDetectionListener(CornerDetectionListener listener) {
+            mCamera.setCornerDetectionListener(listener);
+        }
+
         private void setPreviewTexture(Object surfaceTexture) {
             try {
                 mCamera.setPreviewTexture((SurfaceTexture) surfaceTexture);
@@ -321,6 +329,10 @@ class AndroidCameraManagerImpl implements CameraManager {
                         setFaceDetectionListener((FaceDetectionListener) msg.obj);
                         return;
 
+					case SET_CORNER_DETECTION_LISTENER:
+                        setCornerDetectionListener((CornerDetectionListener) msg.obj);
+                        return;
+
                     case START_FACE_DETECTION:
                         startFaceDetection();
                         return;
@@ -577,6 +589,14 @@ class AndroidCameraManagerImpl implements CameraManager {
                     SET_FACE_DETECTION_LISTENER,
                     FaceDetectionCallbackForward.getNewInstance(handler, this, cb)).sendToTarget();
         }
+		
+        @Override
+		public void setCornerDetectionCallback(
+                Handler handler, CameraCornerDetectionCallback cb) {
+            mCameraHandler.obtainMessage(
+                    SET_CORNER_DETECTION_LISTENER,
+                    CornerDetectionCallbackForward.getNewInstance(handler, this, cb)).sendToTarget();
+        }
 
         @Override
         public void startFaceDetection() {
@@ -910,6 +930,49 @@ class AndroidCameraManagerImpl implements CameraManager {
         }
     }
 
+	private static class CornerDetectionCallbackForward implements CornerDetectionListener {
+        private final Handler mHandler;
+        private final CameraCornerDetectionCallback mCallback;
+        private final CameraProxy mCamera;
+
+        /**
+         * Returns a new instance of {@link FaceDetectionCallbackForward}.
+         *
+         * @param handler The handler in which the callback will be invoked in.
+         * @param camera  The {@link CameraProxy} which the callback is from.
+         * @param cb      The callback to be invoked.
+         * @return        The instance of the {@link FaceDetectionCallbackForward},
+         *                or null if any parameter is null.
+         */
+        public static CornerDetectionCallbackForward getNewInstance(
+                Handler handler, CameraProxy camera, CameraCornerDetectionCallback cb) {
+            if (handler == null || camera == null || cb == null) return null;
+            return new CornerDetectionCallbackForward(handler, camera, cb);
+        }
+
+        private CornerDetectionCallbackForward(
+                Handler h, CameraProxy camera, CameraCornerDetectionCallback cb) {
+            mHandler = h;
+            mCamera = camera;
+            mCallback = cb;
+        }
+
+        @Override
+        public void onCornerDetection(
+                final Camera.Corner[] corners, Camera camera) {
+            final android.hardware.Camera currentCamera = mCamera.getCamera();
+
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if ((currentCamera != null) && currentCamera.equals(mCamera.getCamera())) {
+                        mCallback.onCornerDetection(corners, mCamera);
+                    }
+                }
+            });
+        }
+    }
+
     /**
      * A callback helps to invoke the original callback on another
      * {@link android.os.Handler}.
diff --git a/src/com/android/camera/CameraManager.java b/src/com/android/camera/CameraManager.java
old mode 100644
new mode 100755
index 7f59975..6bdaebf
--- a/src/com/android/camera/CameraManager.java
+++ b/src/com/android/camera/CameraManager.java
@@ -99,6 +99,16 @@ public interface CameraManager {
         public void onFaceDetection(Camera.Face[] faces, CameraProxy camera);
     }
 
+    public interface CameraCornerDetectionCallback {
+        /**
+         * Callback for face detection.
+         *
+         * @param faces   Recognized face in the preview.
+         * @param camera  The camera which the preview image comes from.
+         */
+        public void onCornerDetection(Camera.Corner[] corners, CameraProxy camera);
+    }
+
     /**
      * An interface to be called for any exception caught when opening the
      * camera device. This error callback is different from the one defined
@@ -321,6 +331,8 @@ public interface CameraManager {
          */
         public void setFaceDetectionCallback(Handler handler, CameraFaceDetectionCallback callback);
 
+		public void setCornerDetectionCallback(Handler handler, CameraCornerDetectionCallback callback);
+
         /**
          * Starts the face detection.
          */
diff --git a/src/com/android/camera/PhotoModule.java b/src/com/android/camera/PhotoModule.java
old mode 100644
new mode 100755
index 279c903..8baff62
--- a/src/com/android/camera/PhotoModule.java
+++ b/src/com/android/camera/PhotoModule.java
@@ -995,6 +995,7 @@ public class PhotoModule
             mUI.onStartFaceDetection(mDisplayOrientation,
                     (info.facing == CameraInfo.CAMERA_FACING_FRONT));
             mCameraDevice.setFaceDetectionCallback(mHandler, mUI);
+			mCameraDevice.setCornerDetectionCallback(mHandler, mUI);
             mCameraDevice.startFaceDetection();
         }
     }
diff --git a/src/com/android/camera/PhotoUI.java b/src/com/android/camera/PhotoUI.java
old mode 100644
new mode 100755
index fd848c6..aed4c90
--- a/src/com/android/camera/PhotoUI.java
+++ b/src/com/android/camera/PhotoUI.java
@@ -35,6 +35,7 @@ import android.graphics.drawable.AnimationDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.hardware.Camera;
 import android.hardware.Camera.Face;
+import android.hardware.Camera.Corner;
 import android.os.AsyncTask;
 import android.preference.PreferenceManager;
 import android.util.Log;
@@ -85,7 +86,8 @@ public class PhotoUI implements PieListener,
         FocusUI,
         SurfaceHolder.Callback,
         CameraRootView.MyDisplayListener,
-        CameraManager.CameraFaceDetectionCallback {
+        CameraManager.CameraFaceDetectionCallback,
+        CameraManager.CameraCornerDetectionCallback {
 
     private static final String TAG = "CAM_UI";
     private int mDownSampleFactor = 4;
@@ -1317,6 +1319,11 @@ public class PhotoUI implements PieListener,
         mFaceView.setFaces(faces);
     }
 
+	@Override
+    public void onCornerDetection(Corner[] corners, CameraManager.CameraProxy camera) {
+        mFaceView.setCorners(corners);
+    }
+
     @Override
     public void onDisplayChanged() {
         Log.d(TAG, "Device flip detected.");
diff --git a/src/com/android/camera/ui/FaceView.java b/src/com/android/camera/ui/FaceView.java
old mode 100644
new mode 100755
index dfa84ec..1173ec8
--- a/src/com/android/camera/ui/FaceView.java
+++ b/src/com/android/camera/ui/FaceView.java
@@ -25,6 +25,7 @@ import android.graphics.Color;
 import android.graphics.Paint.Style;
 import android.graphics.RectF;
 import android.hardware.Camera.Face;
+import android.hardware.Camera.Corner;
 import android.os.Handler;
 import android.os.Message;
 import android.util.AttributeSet;
@@ -56,6 +57,8 @@ public class FaceView extends View
     // not having faces)
     private Face[] mFaces;
     private Face[] mPendingFaces;
+	private Corner[] mCorners;
+	private Corner[] mPendingCorners;
     protected int mColor;
     protected final int mFocusingColor;
     private final int mFocusedColor;
@@ -71,9 +74,11 @@ public class FaceView extends View
     private final int blink_threshold = 60;
 
     protected static final int MSG_SWITCH_FACES = 1;
+	protected static final int MSG_SWITCH_CORNERS = 2;
     protected static final int SWITCH_DELAY = 70;
     private int mDisplayRotation = 0;
     protected boolean mStateSwitchPending = false;
+	protected boolean mCornerStateSwitchPending = false;
     private Handler mHandler = new Handler() {
         @Override
         public void handleMessage(Message msg) {
@@ -83,6 +88,11 @@ public class FaceView extends View
                 mFaces = mPendingFaces;
                 invalidate();
                 break;
+			case MSG_SWITCH_CORNERS:
+                mCornerStateSwitchPending = false;
+                mCorners = mPendingCorners;
+                invalidate();
+                break;
             }
         }
     };
@@ -134,6 +144,30 @@ public class FaceView extends View
 
     }
 
+    public void setCorners(Corner[] corners) {
+        Log.e(TAG,"yuanlei44 haha Num of corners=" + corners.length);
+        if (mCorners != null) {
+            if ((corners.length > 0 && mCorners.length == 0)
+                    || (corners.length == 0 && mCorners.length > 0)) {
+                mPendingCorners = corners;
+                if (!mCornerStateSwitchPending) {
+                    mCornerStateSwitchPending = true;
+                    mHandler.sendEmptyMessageDelayed(MSG_SWITCH_CORNERS, SWITCH_DELAY);
+                }
+                return;
+            }
+        }
+        if (mCornerStateSwitchPending) {
+            mCornerStateSwitchPending = false;
+            mHandler.removeMessages(MSG_SWITCH_CORNERS);
+        }
+        mCorners = corners;
+        if (!mBlocked && (mCorners != null) && (mCorners.length > 0)) {
+            invalidate();
+        }
+
+    }
+
     public void setDisplayOrientation(int orientation) {
         mDisplayOrientation = orientation;
         if (LOGV) Log.v(TAG, "mDisplayOrientation=" + orientation);
@@ -386,6 +420,33 @@ public class FaceView extends View
             }
             canvas.restore();
         }
+
+/*		if (!mBlocked && (mCorners != null) && (mCorners.length > 0)) {
+			RectF rect = new RectF(0,0,0,0);
+			int left = 0,top = 0,right = 0,bottom = 0;
+			canvas.save();
+			if(mCorners.length > 0) {
+				left = mCorners[0].corner.x;
+				right = mCorners[0].corner.x;
+				top = mCorners[0].corner.y;
+				bottom = mCorners[0].corner.y;
+			}
+			for (int i = 0; i < mCorners.length; i++) {
+				if(mCorners[i].corner.x > right)
+					right = mCorners[i].corner.x;
+				if(mCorners[i].corner.x < left)
+					left = mCorners[i].corner.x;
+				if(mCorners[i].corner.y > top)
+					top = mCorners[i].corner.y;
+				if(mCorners[i].corner.y < bottom)
+					bottom = mCorners[i].corner.y;
+		//		canvas.drawPoint(mCorners[i].corner.x,mCorners[i].corner.y,mPaint);
+		//		Log.e(TAG,"yuanlei44 haha draw point x= " + mCorners[i].corner.x + ", y= " + mCorners[i].corner.y);
+			}
+			rect.set(left,top,right,bottom);
+			canvas.drawOval(mRect, mPaint);
+			canvas.restore();
+		}*/
         super.onDraw(canvas);
     }
 }
